--  services

local Players   = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService    = game:GetService("RunService")
local TeleportService   = game:GetService("TeleportService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

--  variables

local Player    = Players.LocalPlayer
local DataStreams   =  ReplicatedStorage.CloudFrameShared.DataStreams
local library   = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/miroeramaa/TurtleLib/main/TurtleUiLib.lua"))()
local mainWindow    = library:Window("Fishing Frontier")
local isFishing = false
local isSelling = true
local fishCount = 0
local rodHook   = nil

--  functions

mainWindow:Toggle("Auto-Fish", isFishing, function(bool)
    isFishing = bool

    if not isFishing and rodHook then
        rodHook:disconnect()
        rodHook = nil
    elseif isFishing and rodHook then
        DataStreams.FishBiting:InvokeServer()
    end
end)

mainWindow:Toggle("Auto-Sell", isSelling, function(bool)
    isSelling   = bool
end)

local function findRod()
    return Player.Character and Player.Character:FindFirstChildOfClass("Tool") and Player.Character:FindFirstChildOfClass("Tool"):FindFirstChild("Bobber")
end

local function doChar(char)
    char.ChildAdded:connect(function()
        local myRod = findRod()

        if not rodHook and myRod then
            rodHook = myRod.HookedFish:GetPropertyChangedSignal("Value"):connect(function()
                if isFishing and myRod.HookedFish.Value then
                    repeat RunService.RenderStepped:Wait() until not myRod.HookedFish.Value or Workspace:FindFirstChild(myRod.HookedFish.Value.Name)
                    if myRod.HookedFish.Value then 
                        DataStreams.FishCaught:FireServer()
                        
                        if isSelling then
                            DataStreams.processGameItemSold:InvokeServer("SellEverything")
                        end

                        wait(2)
                    end
                    
                    DataStreams.FishBiting:InvokeServer()
                end
            end)

            if isFishing then
                DataStreams.FishBiting:InvokeServer()
            end
        end
    end)

    char.ChildRemoved:connect(function(rod)
        if rodHook and rod:IsA("Tool") and rod:FindFirstChild("Bobber") then
            rodHook:disconnect()
            rodHook = nil
        end
    end)
end

if Player.Character then
    doChar(Player.Character)
end
Player.CharacterAdded:connect(function(char)
    doChar(char)
end)
